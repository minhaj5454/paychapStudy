# service: bunker-coin

# provider:
#   name: aws
#   runtime: nodejs18.x
#   region: eu-central-1
#   stage: ${opt:stage, 'dev'} # This sets the default stage to 'dev'
#   lambdaHashingVersion: "20201221"

# plugins:
#   - serverless-dotenv-plugin
#   - serverless-offline
#   - serverless-iam-roles-per-function
#   - serverless-plugin-log-retention

# package:
#   individually: true
#   excludeDevDependencies: true
#   patterns:
#     - '!node_modules/aws-sdk/**'
#     - '!node_modules/@aws-crypto/**'
#     - '!node_modules/@aws-sdk/**'
#     - '!node_modules/bowser/**'
#     - '!node_modules/fast-xml-parser/**'
#     - '!node_modules/strnum/**'

# custom:
#   logRetentionInDays: 7

# functions:
#   api:
#     handler: server.handler
#     timeout: 60
#     memorySize: 1024
#     environment:
#       LAMBDA: TRUE
#       REQUIRE_AWS_V3: TRUE
#     iamRoleStatementsInherit: true
#     iamRoleStatements:
#       - Effect: "Allow"
#         Action:
#           - s3:*
#           - ses:SendEmail
#           - lambda:InvokeFunction
#           - lambda:InvokeAsync
#           - execute-api:Invoke
#         Resource: "*"

#     events:
#       - http:
#           path: /
#           method: ANY
#           cors:
#             origin: '*'
#       - http:
#           path: /{proxy+}
#           method: ANY
#           cors:
#             origin: '*'

# resources:
#   Resources:
#     UploadBucket:
#       Type: 'AWS::S3::Bucket'
#       DeletionPolicy : Retain
#       Properties:
#         BucketName: github-${self:provider.stage}
#         BucketEncryption:
#           ServerSideEncryptionConfiguration:
#             - ServerSideEncryptionByDefault:
#                 SSEAlgorithm: AES256
#         CorsConfiguration:
#           CorsRules:
#             - AllowedMethods:
#                 - GET
#                 - HEAD
#                 - PUT
#               AllowedOrigins:
#                 - "*"
#               AllowedHeaders:
#                 - "*"



# by minhaj
service: minhajStudy

provider:
  name: aws
  runtime: nodejs18.x
  region: eu-north-1
  stage: ${opt:stage, 'dev'}
  lambdaHashingVersion: "20201221"
  environment:
    AWS_BUCKET: ${self:custom.bucketName}
    # AWS_REGION: ${self:provider.region}

plugins:
  - serverless-dotenv-plugin
  - serverless-offline
  - serverless-iam-roles-per-function
  - serverless-plugin-log-retention

package:
  individually: true
  excludeDevDependencies: true
  patterns:
    - '!node_modules/aws-sdk/**'
    - '!node_modules/@aws-crypto/**'
    - '!node_modules/@aws-sdk/**'
    - '!node_modules/bowser/**'
    - '!node_modules/fast-xml-parser/**'
    - '!node_modules/strnum/**'

custom:
  logRetentionInDays: 7
  bucketName: s3-study-bucket-minhaj # <-- your bucket name from .env

functions:
  api:
    handler: server.handler
    timeout: 60
    memorySize: 1024
    environment:
      LAMBDA: TRUE
      REQUIRE_AWS_V3: TRUE
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - s3:*
          - ses:SendEmail
          - lambda:InvokeFunction
          - lambda:InvokeAsync
          - execute-api:Invoke
        Resource: "*"
    events:
      - http:
          path: /
          method: ANY
          cors:
            origin: '*'
      - http:
          path: /{proxy+}
          method: ANY
          cors:
            origin: '*'

# resources:
#   Resources:
#     UploadBucket:
#       Type: 'AWS::S3::Bucket'
#       DeletionPolicy: Retain
#       Properties:
#         BucketName: ${self:custom.bucketName}
#         BucketEncryption:
#           ServerSideEncryptionConfiguration:
#             - ServerSideEncryptionByDefault:
#                 SSEAlgorithm: AES256
#         CorsConfiguration:
#           CorsRules:
#             - AllowedMethods:
#                 - GET
#                 - HEAD
#                 - PUT
#                 - POST
#               AllowedOrigins:
#                 - "*"
#               AllowedHeaders:
#                 - "*"
# Uncomment below to make all files public (not recommended for sensitive data)
#        AccessControl: PublicRead
#  UploadBucketPolicy:
#    Type: AWS::S3::BucketPolicy
#    Properties:
#      Bucket: !Ref UploadBucket
#      PolicyDocument:
#        Statement:
#          - Effect: Allow
#            Principal: "*" 
#            Action: "s3:GetObject"
#            Resource: !Sub "${UploadBucket.Arn}/*"